
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model usuario {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(100)       // NOT NULL por padrão
  email     String    @unique                // UNIQUE garante e-mails únicos
  senha     String                             // NOT NULL (padrão)
  formacoes usuariosformacoes[]
  demandas  demanda[]

}

model empresa {
  id         Int      @id @default(autoincrement())
  nome       String    @db.VarChar(100)
  cnpj       String    @unique                // UNIQUE evita duplicar CNPJs
  telefone   String    @db.VarChar(20)
  email      String    @unique
  redeSocial String?   @db.VarChar(255)
  senha      String
  createdAt  DateTime  @default(now())
}


model formacao {
  id        Int       @id @default(autoincrement())
  nome      String    @unique
  usuarios  usuariosformacoes[]
  demandas  demanda[]
}

model usuariosformacoes {
  id          Int     @id @default(autoincrement())
  usuario_id  Int
  formacao_id Int

  usuario   usuario  @relation(fields: [usuario_id], references: [id])
  formacao  formacao @relation(fields: [formacao_id], references: [id])
}

model demanda {
  id          Int      @id @default(autoincrement())
  cargo       String    @db.VarChar(100)
  valor       Int       @default(0) @check("valor >= 0")  // CHECK: não permite valor negativo
  descricao   String
  status      String    @default("aberta")
  usuario_id  Int
  formacao_id Int

  usuario   usuario  @relation(fields: [usuario_id], references: [id])
  formacao  formacao @relation(fields: [formacao_id], references: [id])
  avaliacoes avaliacao[]
}

model avaliacao {
  id                   Int    @id @default(autoincrement())
  demanda_id           Int
  usuario_avaliador_id Int
  usuario_avaliado_id  Int
  pontuacao            Int
  comentario           String

  demanda    demanda @relation(fields: [demanda_id], references: [id])
 
}

